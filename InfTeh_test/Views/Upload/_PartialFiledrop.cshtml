@model int?

<div id="drop-area">
    <form class="my-form h-20">
        <div class="row">
            <div class="col-12 col-md-6 align-self-center justify-content-center"><p>Для загрузки перетащите</p></div>
            <div class="col-12 col-md-6"><label class="btn btn-primary" for="fileElem">Или нажмите</label></div>
        </div>
        <progress class="col-12" id="progress-bar" max=100 value=0></progress>
        <input type="file" id="fileElem" multiple accept="image/*" onchange="handleFiles(this.files)">
    </form>
    <div class="h-80" id="gallery" />
</div>
<style>
    .note {
        width: 500px;
        margin: 50px auto;
        font-size: 1.1em;
        color: #333;
        text-align: justify;
    }
    #drop-area {
        border: 2px dashed #007bff;
        border-radius: 20px;
        width: 100%;
        height: 100%;
        margin: 0px auto;
        padding: 20px;
        transition: all .3s ease
    }
    #drop-area.highlight {
            border-color: #002bff;
            background: #badbff;
    }
    #gallery {
        margin-top: 10px;
    }
    #gallery img {
            width: 150px;
            margin-bottom: 10px;
            margin-right: 10px;
            vertical-align: middle;
    }
    #fileElem {
        display: none;
    }
</style>

<script>
    // ************************ Drag and drop ***************** //
    let dropArea = document.getElementById("drop-area");

        // Prevent default drag behaviors
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, preventDefaults, false);
        document.body.addEventListener(eventName, preventDefaults, false);
    });

        // Highlight drop area when item is dragged over it
        ['dragenter', 'dragover'].forEach(eventName => {
            dropArea.addEventListener(eventName, highlight, false);
        });

    ['dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, unhighlight, false);
    });

    // Handle dropped files
    dropArea.addEventListener('drop', handleDrop, false);

    function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }

    function highlight(e) {
        dropArea.classList.add('highlight');
    }

    function unhighlight(e) {
        dropArea.classList.remove('highlight');
    }

    function handleDrop(e) {
        var dt = e.dataTransfer;
        var files = dt.files;
        handleFiles(files);
    }

    let uploadProgress = [];
    let progressBar = document.getElementById('progress-bar');

    function initializeProgress(numFiles) {
        progressBar.value = 0;
        uploadProgress = [];
        for (let i = numFiles; i > 0; i--) {
            uploadProgress.push(0);
        }
    }

    function updateProgress(fileNumber, percent) {
        uploadProgress[fileNumber] = percent;
        let total = uploadProgress.reduce((tot, curr) => tot + curr, 0) / uploadProgress.length;
        console.debug('update', fileNumber, percent, total);
        progressBar.value = total;
    }

    function handleFiles(files) {
        files = [...files];
        initializeProgress(files.length);
        files.forEach(uploadFile);
        files.forEach(previewFile);
        setTimeout(loadChildrenByFolderID(@Model), 200);
    }

    function previewFile(file) {
        let reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onloadend = function () {
            let img = document.createElement('img');
            img.src = reader.result;
            document.getElementById('gallery').appendChild(img);
        }
    }

    function uploadFile(file, i) {

        var url = '@Url.Action("UploadFiles", "Upload")';


        var xhr = new XMLHttpRequest();
        var formData = new FormData();
        xhr.open('POST', url, true);
        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');

        xhr.upload.addEventListener("progress",
            function(e) {
                updateProgress(i, (e.loaded * 100.0 / e.total) || 100);

            });

        xhr.addEventListener('readystatechange',
            function(e) {
                if (xhr.readyState == 4 && xhr.status == 200) {
                    updateProgress(i, 100);
                    $('#toastContainer').load('@Url.Action("Partial_SuccesUploadedToast","Toast")');
                } else if (xhr.readyState == 4 && xhr.status != 200) {
                    $('#toastContainer').load('@Url.Action("Partial_UnknownErrorToast","Toast")');
                }
            });

       @{
           string folderid = Model == null ? "getParentFolderID()" : "";
       }
        formData.append('folderid', @folderid);
        formData.append('files', file);
        xhr.send(formData);
    }
</script>