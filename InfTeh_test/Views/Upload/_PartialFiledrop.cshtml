@model InfTeh_test.Models.Upload.UploadModel

<div id="drop-area">
    <form class="my-form h-20">
        <div class="row">
            <div class="col-6">
                <div class="row">
                    <div class="col-12 align-self-center justify-content-center text-primary">
                        Перетащите файл
                    </div>
                    <div class="col-12"><label class="btn btn-sm btn-outline-primary" for="fileElem">Или нажмите</label></div>
                </div>
            </div>
            <div class="col-6">
          
                <div class="row">
                    <div class="col-12 text-primary">
                        @if (Model.Mode == 1)
                        {
                            <text>Загрузка файлов в папку:</text>
                        }
                        else if (Model.Mode == 2)
                        {
                            <text>Загрузка иконки расширения</text>
                        }
                    </div>
                    <div class="col-12">
                        @Model.folderName
                    </div>
                </div>
            </div>
        </div>
        <progress class="col-12" id="progress-bar" max=100 value=0></progress>
        <div class="col-12 small text-muted">Максимум 100 Мб</div>
        <input type="file" id="fileElem" multiple @*accept="image/*"*@ onchange="handleFiles(this.files)">
    </form>
    <div class="h-80" id="gallery" />
</div>
<style>
    .note {
        margin: 50px auto;
        font-size: 1.1em;
        color: #333;
        text-align: justify;
    }
    #drop-area {
        border: 2px dashed #007bff;
        border-radius: 20px;
        width: 100%;
        height: 100%;
        margin: 0px auto;
        padding: 20px;
        transition: all .3s ease
    }
    #drop-area.highlight {
            border-color: #002bff;
            background: #badbff;
    }
    #gallery {
        margin-top: 10px;
    }
    #gallery img {
            width: 50px;
            margin-bottom: 10px;
            margin-right: 10px;
            vertical-align: middle;
    }
    #fileElem {
        display: none;
    }
</style>

<script>
    // ************************ Drag and drop ***************** //
    var dropArea = document.getElementById("drop-area");
    var uploadProgress = [];
    var progressBar = document.getElementById('progress-bar');

        // Prevent default drag behaviors
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, preventDefaults, false);
        document.body.addEventListener(eventName, preventDefaults, false);
    });

        // Highlight drop area when item is dragged over it
        ['dragenter', 'dragover'].forEach(eventName => {
            dropArea.addEventListener(eventName, highlight, false);
        });

    ['dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, unhighlight, false);
    });

    // Handle dropped files
    dropArea.addEventListener('drop', handleDrop, false);

    function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }

    function highlight(e) {
        dropArea.classList.add('highlight');
    }

    function unhighlight(e) {
        dropArea.classList.remove('highlight');
    }

    function handleDrop(e) {
        var dt = e.dataTransfer;
        var files = dt.files;
        handleFiles(files);
    }

    function initializeProgress(numFiles) {
        progressBar.value = 0;
        uploadProgress = [];
        for (let i = numFiles; i > 0; i--) {
            uploadProgress.push(0);
        }
    }

    function updateProgress(fileNumber, percent) {
        uploadProgress[fileNumber] = percent;
        let total = uploadProgress.reduce((tot, curr) => tot + curr, 0) / uploadProgress.length;
        console.debug('update', fileNumber, percent, total);
        progressBar.value = total;
    }

    function handleFiles(files) {
        files = [...files];
        initializeProgress(files.length);
        files.forEach(uploadFile);
        files.forEach(previewFile);
    }

    function previewFile(file) {
        if (~file.type.indexOf("image")) {
            let reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onloadend = function() {
                let img = document.createElement('img');
                img.src = reader.result;
                $('#gallery').append(img);
            }
        } else {
            let img = document.createElement('img');
            img.src = "/Content/FileIcons/uploaded.svg";
            $('#gallery').append(img);
        }
    }

    function uploadFile(file, i) {

       @{
           string url = "";
           switch (Model.Mode){
               case 1:
                   url = Url.Action("UploadFiles", "Upload");
                   break;
               case 2:
                   url = Url.Action("UploadFileIcon", "Upload");
                   break;
               default:
                   url = Url.Action("UploadFiles", "Upload");
                   break;
           }
       }

        var xhr = new XMLHttpRequest();
        var formData = new FormData();
        xhr.open('POST','@url', true);
        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');

        xhr.upload.addEventListener("progress",
            function(e) {
                updateProgress(i, (e.loaded * 100.0 / e.total) || 100);
            });

       var folderid;
        if ('@(Model.folderid)' == '') {
            folderid = getParentFolderID();
        } else {
            folderid = '@(Model.folderid)';
        }
       @{
           string folderid = Model.folderid == null ? "getParentFolderID()" : "";
       }
        xhr.addEventListener('readystatechange',
            function(e) {
                if (xhr.readyState == 4 && xhr.status == 200) {
                    updateProgress(i, 100);
                    $('#toastContainer').load('@Url.Action("Partial_SuccesUploadedToast","Toast")');
                    if ('@Model.Mode' === '2') {
                        loadIconCreateForm();
                        return;
                    }
                    setTimeout(function () {
                        loadChildrenByFolderID(folderid);
                        showFolderContent(folderid);
                    }, 400);
                } else if (xhr.readyState == 4 && xhr.status != 200) {
                    $('#toastContainer').load('@Url.Action("Partial_UnknownErrorToast","Toast")');
                }
            });

        formData.append('folderid', folderid);
        formData.append('files', file);
        xhr.send(formData);
       clearUploadedFilesPreview();
    }

    function clearUploadedFilesPreview() {
        setTimeout(function () {
            $('#gallery img').hide('ease');
        }, 5000);
        setTimeout(function () {
            $('#gallery').html('');
        }, 6000);
    }
</script>